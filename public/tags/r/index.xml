<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Tony Duan</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Tony Duan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tensorflow course by Udacity</title>
      <link>/post/tensorflow-course-by-udacity/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/tensorflow-course-by-udacity/</guid>
      <description>ContentIntro
Introduction to Machine Learning
Fashion MNIST
Introduction to CNNs
Going Further With CNNs
Transfer Learning
Saving and Loading Models
Time Series Forecasting
Appendix
1) Intro2) Introduction to Machine Learning3) Fashion MNIST4) Introduction to CNNs5) Going Further With CNNs6) Transfer Learning7) Saving and Loading Models8) Time Series Forecasting9) Appendixhttps://www.</description>
    </item>
    
    <item>
      <title>rstudio::conf 2019</title>
      <link>/post/rstudio-conf-2019/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/rstudio-conf-2019/</guid>
      <description>I segment the talk into following groups:Get,clean,visualize,model,present,other
Rstudio conference 2019 hosted during January 15 - 18 in Austin, TX
Rstudio conference 2020 will be hosted in San Francisco, California from January 27–30, 2020
Get:Databases using R: The latest - Edgar Ruizconnect with database with R in connection pane
Clean:Working with names and expressions in your tidy eval code - Lionel HenryLazy evaluation - Jenny BryanThe “tidy eval” framework is implemented in the rlang package and is rolling out in packages across the tidyverse and beyond.</description>
    </item>
    
    <item>
      <title>Who use R</title>
      <link>/post/who-use-r/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/who-use-r/</guid>
      <description>PurposeUsing R and R package download volume to estimate how many people are using R in the world.
There are two data sources:
JSON API data from https://cranlogs.r-pkg.org/
data from package cranlogs which wrap data from https://cranlogs.r-pkg.org/
CSV data from http://cran-logs.rstudio.com/
ConclusionEstimate total 1-2 milion R user around the world 35% from US and 5% from China with 20% YOY grow.</description>
    </item>
    
    <item>
      <title>Understanding Colors</title>
      <link>/post/understanding-colors/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/understanding-colors/</guid>
      <description>Understanding Colors by blenderguru.comcolor brewerggplot# color brewer:Qualitative (qual)library(ggplot2)library(dplyr)data002=sample_n(diamonds,1000)ggplot(data002,aes(x=carat, y=price, color=clarity)) +geom_point() +scale_color_brewer(type=&amp;#39;qual&amp;#39;)# color brewer:Sequential (seq) library(ggplot2)library(dplyr)data002=sample_n(diamonds,1000)ggplot(data002,aes(x=carat, y=price, color=clarity)) +geom_point() +scale_color_brewer(type=&amp;#39;seq&amp;#39;)# color brewer:Diverging (div)library(ggplot2)library(dplyr)data002=sample_n(diamonds,1000)ggplot(data002,aes(x=carat, y=price, color=clarity)) +geom_point() +scale_color_brewer(type=&amp;#39;div&amp;#39;)plotly# color brewer:RdBulibrary(plotly)library(RColorBrewer)library(dplyr)data002=sample_n(diamonds,1000)plot_ly(data=data002,x=~carat, y=~price, color=~clarity,colors = brewer.</description>
    </item>
    
    <item>
      <title>What&#39;s new on Rstudio 1.2</title>
      <link>/post/what-s-new-on-rstudio-1-2/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/what-s-new-on-rstudio-1-2/</guid>
      <description>Rstudio 1.2The RStudio 1.2 Preview Release,available at 2018-10-02.
1.New Rstudio logo(Rstudio 1.2)
(Rstudio 1.1)
2.Not longer support 32-bit base R(Rstudio 1.2 only support 64-bit base R)
(Rstudio 1.1 can choose 32-bit or 64 bit base R)
3.Python support1.Support line-by-line execution of Python code
2.When working on Rmarkdwon ,1.2 now able to call python variable on R environment or call R variable on python environment</description>
    </item>
    
    <item>
      <title>Object detection in Shiny</title>
      <link>/post/object-detection-in-shiny/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/object-detection-in-shiny/</guid>
      <description>Object detection in Shiny.
Host in shinyapp.io
Model:
Cat vs Dog CNN model
VGG16 transfer learning Cat vs Dog CNN model
VGG16 transfer learning Cat vs Dog CNN model
mobilenet model
Restnet50 model
tiny Yolo model
</description>
    </item>
    
    <item>
      <title>rstudio::conf 2018</title>
      <link>/post/rstudio-conf-2018/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/rstudio-conf-2018/</guid>
      <description>I segment the talk into following groups:Get,clean,visualize,model,present,other
Rstudio conference 2018 hosted during January 15 - 18 in Austin, TX
Get:Clean:Visualize:Model:Machine Learning with R and TensorFlow - J.J. ALLAIREReinforcement learning in Minecraft with CNTK-R – Ali-Kazim ZaidiPresent:Other:</description>
    </item>
    
    <item>
      <title>(1/7)TensorFlow by Udacity:introduciton</title>
      <link>/post/1-7-tensorflow-by-udacity-introduciton/</link>
      <pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate>
      
      <guid>/post/1-7-tensorflow-by-udacity-introduciton/</guid>
      <description>import tensorflow as tfimport numpy as npimport tensorflow as tfprint(tf.__version__)## 2.0.0# datacelsius_q = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)fahrenheit_a = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)for i,c in enumerate(celsius_q):print(&amp;quot;{} degrees Celsius = {} degrees Fahrenheit&amp;quot;.format(c, fahrenheit_a[i]))## -40.0 degrees Celsius = -40.0 degrees Fahrenheit## -10.0 degrees Celsius = 14.0 degrees Fahrenheit## 0.0 degrees Celsius = 32.</description>
    </item>
    
    <item>
      <title>(2/7)TensorFlow by Udacity:Deep neural network(DNN)</title>
      <link>/post/2-7-tensorflow-by-udacity-deep-neural-network-dnn/</link>
      <pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate>
      
      <guid>/post/2-7-tensorflow-by-udacity-deep-neural-network-dnn/</guid>
      <description>import tensorflow as tfimport tensorflow_datasets as tfdsimport mathimport numpy as npimport matplotlib.pyplot as plttfds.disable_progress_bar()import tensorflow as tfprint(tf.__version__)## 2.0.0dataset, metadata = tfds.load(&amp;#39;fashion_mnist&amp;#39;,as_supervised=True, with_info=True)train_dataset, test_dataset = dataset[&amp;#39;train&amp;#39;], dataset[&amp;#39;test&amp;#39;]class_names = [&amp;#39;T-shirt/top&amp;#39;, &amp;#39;Trouser&amp;#39;, &amp;#39;Pullover&amp;#39;, &amp;#39;Dress&amp;#39;, &amp;#39;Coat&amp;#39;,&amp;#39;Sandal&amp;#39;, &amp;#39;Shirt&amp;#39;, &amp;#39;Sneaker&amp;#39;, &amp;#39;Bag&amp;#39;, &amp;#39;Ankle boot&amp;#39;]num_train_examples = metadata.splits[&amp;#39;train&amp;#39;].num_examplesnum_test_examples = metadata.splits[&amp;#39;test&amp;#39;].num_examplesprint(&amp;quot;Number of training examples: {}&amp;quot;.format(num_train_examples))## Number of training examples: 60000print(&amp;quot;Number of test examples: {}&amp;quot;.</description>
    </item>
    
    <item>
      <title>(3/7)TensorFlow by Udacity:Conversational neural network(CNN)</title>
      <link>/post/3-7-tensorflow-by-udacity-conversational-neural-network-cnn/</link>
      <pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate>
      
      <guid>/post/3-7-tensorflow-by-udacity-conversational-neural-network-cnn/</guid>
      <description>import tensorflow_datasets as tfdstfds.disable_progress_bar()# Helper librariesimport mathimport numpy as npimport matplotlib.pyplot as pltimport tensorflow as tfimport tensorflow as tfprint(tf.__version__)## 2.0.0# datadataset, metadata = tfds.load(&amp;#39;fashion_mnist&amp;#39;, as_supervised=True, with_info=True)train_dataset, test_dataset = dataset[&amp;#39;train&amp;#39;], dataset[&amp;#39;test&amp;#39;]class_names = [&amp;#39;T-shirt/top&amp;#39;, &amp;#39;Trouser&amp;#39;, &amp;#39;Pullover&amp;#39;, &amp;#39;Dress&amp;#39;, &amp;#39;Coat&amp;#39;,&amp;#39;Sandal&amp;#39;, &amp;#39;Shirt&amp;#39;, &amp;#39;Sneaker&amp;#39;, &amp;#39;Bag&amp;#39;, &amp;#39;Ankle boot&amp;#39;]num_train_examples = metadata.splits[&amp;#39;train&amp;#39;].num_examplesnum_test_examples = metadata.splits[&amp;#39;test&amp;#39;].num_examplesprint(&amp;quot;Number of training examples: {}&amp;quot;.format(num_train_examples))## Number of training examples: 60000print(&amp;quot;Number of test examples: {}&amp;quot;.</description>
    </item>
    
  </channel>
</rss>