[
["clean.html", "Chapter 3 Clean 3.1 R Data Types 3.2 R Data structures 3.3 Working with date and time 3.4 Working with missing data 3.5 Working with string 3.6 Exploratory data analysis[EDA] 3.7 Fifty shape of data", " Chapter 3 Clean Data cleaning seems to be a dirty job at first ,but its truely the art of data analysis and data usually come in differenct shapes and sizes. So how do you reverse ,how do you filp,split and merge back ,group by and then devide effectively. In this chapter,will share how to work throught the data like a Ninja Show all variable and clear all variable: a=1 ls() ## [1] &quot;a&quot; Clear all variable: rm(list=ls()) 3.1 R Data Types 1.Character: typeof(&#39;abc&#39;) ## [1] &quot;character&quot; 2.Numeric: typeof(123) ## [1] &quot;double&quot; 3.Logical: typeof(TRUE) ## [1] &quot;logical&quot; 3.2 R Data structures 1.Vector:v1 is numeric vector,v2 is character vector v1=c(1,2,3) v2=c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) class(v1) ## [1] &quot;numeric&quot; class(v2) ## [1] &quot;character&quot; 2.List: v1=c(1,2,3) v2=c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) list1=list(v1,v2) list1 ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; class(list1) ## [1] &quot;list&quot; 3.Matrix:all cell are numeric v1=c(1,2,3,4) matrix1=matrix(v1,nrow=2, ncol=2,byrow=TRUE) matrix1 ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 class(matrix1) ## [1] &quot;matrix&quot; 4.Data frame(most common used ) d &lt;- c(10,20,30,40) e &lt;- c(&quot;red&quot;, &quot;white&quot;, &quot;red&quot;, NA) f &lt;- c(TRUE,TRUE,TRUE,FALSE) df1=data.frame(d,e,f) df1 ## d e f ## 1 10 red TRUE ## 2 20 white TRUE ## 3 30 red TRUE ## 4 40 &lt;NA&gt; FALSE class(df1) ## [1] &quot;data.frame&quot; 5.Array:all cell are numeric array1 &lt;- array(1:24, dim=c(4,3,2)) array1 ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 13 17 21 ## [2,] 14 18 22 ## [3,] 15 19 23 ## [4,] 16 20 24 class(array1) ## [1] &quot;array&quot; 3.3 Working with date and time Input date into R and find days between two date: # use as.Date( ) to convert strings to dates with ISO 8601 standard :YYYY-MM-DD mydates &lt;- as.Date(c(&quot;2007-06-22&quot;, &quot;2004-02-13&quot;)) mydates ## [1] &quot;2007-06-22&quot; &quot;2004-02-13&quot; # number of days between 6/22/07 and 2/13/04 days &lt;- mydates[1] - mydates[2] days ## Time difference of 1225 days Input differenct date formant into ISO 8601 format: as.Date(&#39;1/15/2001&#39;,format=&#39;%m/%d/%Y&#39;) ## [1] &quot;2001-01-15&quot; as.Date(&#39;April 26, 2001&#39;,format=&#39;%B %d, %Y&#39;) ## [1] &quot;2001-04-26&quot; as.Date(&#39;22JUN01&#39;,format=&#39;%d%b%y&#39;) ## [1] &quot;2001-06-22&quot; Output ISO 8601 format into differenct date formant format(as.Date(&quot;2001-01-15&quot;), format=&#39;%m/%d/%Y&#39;) ## [1] &quot;01/15/2001&quot; format(as.Date(&quot;2001-01-15&quot;), format=&#39;%B %d, %Y&#39;) ## [1] &quot;January 15, 2001&quot; format(as.Date(&quot;2001-01-15&quot;), format=&#39;%d%b%y&#39;) ## [1] &quot;15Jan01&quot; more date format go to https://www.stat.berkeley.edu/~s133/dates.html Find working day between two date(210 days and 150 working days): library(timeDate) # A ’timeDate’ Sequence tS &lt;- timeSequence(as.Date(&quot;2018/1/4&quot;), as.Date(&quot;2018/8/1&quot;)) length(tS) ## [1] 210 # Subset weekdays tW &lt;- tS[isWeekday(tS)] length(tW) ## [1] 150 Find week of the year and day of the week: library(lubridate) d1=as.Date(&quot;2018/1/4&quot;) week(d1) ## [1] 1 weekdays(d1) ## [1] &quot;Thursday&quot; 3.4 Working with missing data Find missing value in vector: y &lt;- c(1,2,3,NA) is.na(y) # returns a vector (F F F T) ## [1] FALSE FALSE FALSE TRUE Find missing value in dataframe: library(dplyr) y &lt;- c(1,2,3,NA) z &lt;- c(1,2,3,NA) x &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,NA) data001=data.frame(v1=y,v2=z,v3=x) data001 ## v1 v2 v3 ## 1 1 1 a ## 2 2 2 b ## 3 3 3 c ## 4 NA NA &lt;NA&gt; summary(data001) ## v1 v2 v3 ## Min. :1.0 Min. :1.0 a :1 ## 1st Qu.:1.5 1st Qu.:1.5 b :1 ## Median :2.0 Median :2.0 c :1 ## Mean :2.0 Mean :2.0 NA&#39;s:1 ## 3rd Qu.:2.5 3rd Qu.:2.5 ## Max. :3.0 Max. :3.0 ## NA&#39;s :1 NA&#39;s :1 Exclude missing value observations: library(dplyr) y &lt;- c(1,2,3,4) z &lt;- c(1,2,3,5) x &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,NA) data001=data.frame(v1=y,v2=z,v3=x) data001 ## v1 v2 v3 ## 1 1 1 a ## 2 2 2 b ## 3 3 3 c ## 4 4 5 &lt;NA&gt; data002 &lt;- na.omit(data001) data002 ## v1 v2 v3 ## 1 1 1 a ## 2 2 2 b ## 3 3 3 c Exclude missing value variable: library(dplyr) y &lt;- c(1,2,3,4) z &lt;- c(1,2,3,6) x &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,NA) data001=data.frame(v1=y,v2=z,v3=x) data001 ## v1 v2 v3 ## 1 1 1 a ## 2 2 2 b ## 3 3 3 c ## 4 4 6 &lt;NA&gt; data002 &lt;- data001%&gt;%select(-v3) data002 ## v1 v2 ## 1 1 1 ## 2 2 2 ## 3 3 3 ## 4 4 6 Replace missing value in one variable by mean: library(dplyr) y &lt;- c(1,2,3,4) z &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;) x &lt;- c(1,2,3,NA) data001=data.frame(v1=y,v2=z,v3=x) data001 ## v1 v2 v3 ## 1 1 a 1 ## 2 2 b 2 ## 3 3 c 3 ## 4 4 d NA data002=data001%&gt;%mutate(v3=ifelse(is.na(v3)==TRUE,mean(data001$v3,na.rm = TRUE),v3)) data002 ## v1 v2 v3 ## 1 1 a 1 ## 2 2 b 2 ## 3 3 c 3 ## 4 4 d 2 3.5 Working with string 3.5.1 string manipulation Add two string together: library(stringr) x &lt;- c(&#39;a123&#39;,&#39;b123&#39;,&#39;c123&#39;,&#39;d123&#39;) y &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;) z=paste(x,y,sep=&#39;_&#39;) z ## [1] &quot;a123_a&quot; &quot;b123_b&quot; &quot;c123_c&quot; &quot;d123_d&quot; Slice string,get 2 characters start from the first character: library(stringr) x &lt;- c(&#39;a123&#39;,&#39;b123&#39;,&#39;c123&#39;,&#39;d123&#39;) z=str_sub(x,1,2) z ## [1] &quot;a1&quot; &quot;b1&quot; &quot;c1&quot; &quot;d1&quot; replace character by match: x &lt;- c(&#39;a123&#39;,&#39;b123&#39;,&#39;c123&#39;,&#39;d123&#39;) z &lt;- str_replace(x, fixed(&quot;123&quot;), &quot;&quot;) z ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; 3.5.2 Regular Expressions 3.6 Exploratory data analysis[EDA] EDA a fancy world for playing around the data and know more about your data.Frequent asked questions like how many recode,how many column,what are the variable ###summarytools package: genrate a html EDA report with each varialbe distribution library(summarytools) dfSummary(iris) ## Data Frame Summary ## iris ## N: 150 ## ------------------------------------------------------------------------------------------------------------------------ ## No Variable Stats / Values Freqs (% of Valid) Text Graph Valid Missing ## ---- --------------- -------------------------- -------------------- -------------------------------- -------- --------- ## 1 Sepal.Length mean (sd) : 5.84 (0.83) 35 distinct values . . : : 150 0 ## [numeric] min &lt; med &lt; max : : : : : (100%) (0%) ## 4.3 &lt; 5.8 &lt; 7.9 : : : : : ## IQR (CV) : 1.3 (0.14) : : : : : ## : : : : : : : : ## ## 2 Sepal.Width mean (sd) : 3.06 (0.44) 23 distinct values : 150 0 ## [numeric] min &lt; med &lt; max : : (100%) (0%) ## 2 &lt; 3 &lt; 4.4 . : ## IQR (CV) : 0.5 (0.14) : : : : ## . . : : : : : : ## ## 3 Petal.Length mean (sd) : 3.76 (1.77) 43 distinct values : 150 0 ## [numeric] min &lt; med &lt; max : : . : (100%) (0%) ## 1 &lt; 4.35 &lt; 6.9 : : : . ## IQR (CV) : 3.5 (0.47) : : : : : . ## : : . : : : : : . ## ## 4 Petal.Width mean (sd) : 1.2 (0.76) 22 distinct values : 150 0 ## [numeric] min &lt; med &lt; max : : (100%) (0%) ## 0.1 &lt; 1.3 &lt; 2.5 : . . : ## IQR (CV) : 1.5 (0.64) : : : : . ## : : : : : . : : : ## ## 5 Species 1. setosa 50 (33.3%) IIIIIIIIIIIIIIII 150 0 ## [factor] 2. versicolor 50 (33.3%) IIIIIIIIIIIIIIII (100%) (0%) ## 3. virginica 50 (33.3%) IIIIIIIIIIIIIIII ## ------------------------------------------------------------------------------------------------------------------------ #view function output a nicer EDA report on your data #view(dfSummary(iris)) ###DataExplorer package: genrate a html EDA report with each varialbe distribution and cross varialbe Correlation Analysis/Principle Component Analysis library(DataExplorer) create_report(iris) ###RtutoR package: genrate a PPT EDA report with each varialbe distribution with target library(RtutoR) # create a EDA output in PPT with Species as target res = generate_exploratory_analysis_ppt(iris,target_var = &quot;Species&quot;, output_file_name = &quot;iris.pptx&quot;) # open a shinyapp for user to input setting and then output a PPT gen_exploratory_report_app(iris) 3.7 Fifty shape of data Data wrangler with dplyr and sqldf package 3.7.1 dplyr package dplyr is a grammar of data manipulation create by Hadley Wickham, providing a consistent set of verbs that help you solve the most common data manipulation challenges: Filter row by condidtion[key word:filter]: mtcars%&gt;%filter(cyl==6) # filter cly==6 mtcars%&gt;%filter(cyl==6 &amp; (hp &gt;120|hp&lt;110)) # filter cly==6 and (hp &gt;120 or hp&lt;110) Filter row by row number: # get 3,4,5 rows mtcars[3:5,] Select column[key word:select]: mtcars%&gt;%select(mpg,cyl) # select mpg and cyl column mtcars%&gt;%select(-mpg) # select all but exclude mpg Select column by column number: # get 3,4,5 columns mtcars[,3:5] Group by,create variable[key word:group_by,summarise]: #number and distinct cyl number mtcars%&gt;%group_by()%&gt;%summarise(row_number=n(),cyl_number=n_distinct(cyl)) # sum row Group by,create variable and then base on the resutle to create a new variable[key word:group_by,summarise,mutate]: # sum mpg and mean mpg for each cyl and create a new variable mpg_sum_k mtcars%&gt;%group_by(cyl)%&gt;%summarise(mpg_sum=sum(mpg),mpg_mean=mean(mpg)%&gt;%mutate(mpg_sum_k=mpg_sum/1000) Order and transpose[key word:arrange,t]: mtcars%&gt;%arrange(desc(cyl)) # order by cyl decreasing t(mtcars) # transpose Join [key word:left_join,full_join,inner_join]: left_join(mtcars[c(1:3),],mtcars[c(3:5),],by=c(&#39;mpg&#39;=&#39;mpg&#39;)) # left join full_join(mtcars[c(1:3),],mtcars[c(3:5),],by=c(&#39;mpg&#39;=&#39;mpg&#39;)) # full join inner_join(mtcars[c(1:3),],mtcars[c(3:5),],by=c(&#39;mpg&#39;=&#39;mpg&#39;)) # inner join Instead of creating a lot of dummy data set,Pipe operator (%&gt;%) allow you to do multiple action on one dataset and output into a new dataset # first select and then filter and then summarize new_mtcars =mtcars%&gt;%filter(cyl==6)%&gt;%select(mpg,cyl)%&gt;%group_by(cyl)%&gt;%summarise(total_mpg=sum(mpg)) 3.7.2 sqldf package data wrangler with sqldf package.It will allow you to manipulate data with sql. no full join available yet: library(sqldf) data=sqldf(&quot;select * from iris&quot;) 3.7.3 tidyr package tidyr package for data reshape library(tidyr) library(dplyr) messy &lt;- data.frame( name = c(&quot;Wilbur&quot;, &quot;Petunia&quot;, &quot;Gregory&quot;), a = c(67, 80, 64), b = c(56, 90, 50) ) messy ## name a b ## 1 Wilbur 67 56 ## 2 Petunia 80 90 ## 3 Gregory 64 50 make variables as one group by variable with gather(wide to long) library(tidyr) library(dplyr) long_format=messy %&gt;%gather(drug, heartrate, a:b) long_format ## name drug heartrate ## 1 Wilbur a 67 ## 2 Petunia a 80 ## 3 Gregory a 64 ## 4 Wilbur b 56 ## 5 Petunia b 90 ## 6 Gregory b 50 make variables as one group by variable with melt(wide to long) library(tidyr) library(dplyr) library(reshape2) long_format2=messy %&gt;%melt() long_format2 ## name variable value ## 1 Wilbur a 67 ## 2 Petunia a 80 ## 3 Gregory a 64 ## 4 Wilbur b 56 ## 5 Petunia b 90 ## 6 Gregory b 50 make group by type as variables (long to wide) library(tidyr) library(dplyr) short_format=long_format %&gt;%spread(drug, heartrate) short_format ## name a b ## 1 Gregory 64 50 ## 2 Petunia 80 90 ## 3 Wilbur 67 56 "]
]
