tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
str(x_train)
str(y_train)
dim(x_train)
dim(y_train)
dim(x_test)
dim(y_test)
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
dim(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
plot(history)
tensorflow_DNN_score
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score
tensorflow_DNN_score
tensorflow_DNN_score$acc
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score
model_score=cbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
glimpse(model_score)
as.data.frame(model_score)
aa=as.data.frame(model_score)
glimpse(aa)
model_score=rbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
as.data.frame(model_score)%>%ggplot()
as.data.frame(model_score)
gg=model_score_df%>%ggplot(aes(x=model,y=V1)+geom_bar(stat = 'identity')
model_score_df=as.data.frame(model_score)
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1)+geom_bar(stat = 'identity')
gg=ggplot(data=model_score_df,aes(x=model,y=V1)+geom_bar(stat = 'identity')
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1))+geom_bar(stat = 'identity')
gg
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1))+geom_bar(stat = 'identity') +coord_flip()
gg
library(keras)
mnist <- dataset_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
library(keras)
fashion_mnist <- dataset_fashion_mnist()
install_keras()
library(keras)
install_keras()
install_keras()
install_keras()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
?fit
??fit
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(x_train, y_train) %<-% fashion_mnist$train
c(x_test, y_test) %<-% fashion_mnist$test
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(3,3))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:4) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
class_names = c('T-shirt/top',
'Trouser',
'Pullover',
'Dress',
'Coat',
'Sandal',
'Shirt',
'Sneaker',
'Bag',
'Ankle boot')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
head(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
dim(x_train)
dim(y_train)
table(y_train)
dim(x_test)
dim(y_test)
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
dim(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
plot(history)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score
y_test_final=mnist$test$y
table(y_test_final)
Naive_score=1000/length(y_test_final)
Naive_score
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score
decision_tree_score=0.61
randon_forest_score=0.92
model_score=rbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
model_score_df=model_score_df %>% arrange(V1) %>%  mutate(model = factor(model, model),Accuray=V1)
library(keras)
library(tidyverse)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
model_score_df=model_score_df %>% arrange(V1) %>%  mutate(model = factor(model, model),Accuray=V1)
gg=ggplot(data=model_score_df,aes(x=model,y=Accuray,fill=model))+geom_bar(stat = 'identity') +geom_text(aes(label=Accuray)) + guides(fill=FALSE)
gg+theme_bw()
blogdown:::serve_site()
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
library(meme)
u <- "kid.png"
x=meme(u, "Tensorflow", "So easy!")
x
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
library(meme)
u <- "kid.png"
x=meme(u, "Tensorflow", "So easy !")
x
library(keras)
# input data
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
# embeding
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
# model
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
# train
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
# result
plot(history)
plot(history)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score
blogdown:::serve_site()
9450000/1893000
1893000/9450000
blogdown:::new_post_addin()
vector001=c(1,2,3,4,5)
vector001
class(vector001)
vector001=c(1,2,3,4,5)
vector001
class(vector001)
typeof(vector001)
vector001=c(1,2,3,4,5)
vector001
class(vector001)
attributes(vector001)
vector002=c('a','b','c')
vector002
class(vector001)
vector002=c('a','b','c')
vector002
class(vector002)
vector001=c(1,2,3,4,5)
vector001
class(vector001)
vector002=c('a','b','c')
vector002
class(vector002)
matrix001=matrix(1:6, ncol = 3, nrow = 2)
matrix001
class(matrix001)
matrix001=matrix(1:6, ncol = 3, nrow = 2)
matrix001
class(matrix001)
typeof(matrix001)
matrix002=matrix(c('a','b','c','d','e','f'), ncol = 2, nrow = 3)
matrix002
class(matrix001)
typeof(matrix001)
vector001=c(1,2,3,4,5)
vector001
class(vector001)
is.vector(vector001)
matrix001=matrix(1:6, ncol = 3, nrow = 2)
matrix001
class(matrix001)
is.matrix(matrix001)
matrix002=matrix(c('a','b','c','d','e','f'), ncol = 2, nrow = 3)
matrix002
class(matrix002)
is.matrix(matrix002)
Array001=array(c(1:24),dim = c(4,3,2))
Array001
class(Array001)
is.array(Array001)
Array002=array(c('a','b','c','d','e','f','g','h'),dim = c(2,2,2))
Array002
class(Array002)
is.array(Array002)
vector001=c(1,2,3,4,5)
vector001
class(vector001)
is.vector(vector001)
vector002=c('a','b','c')
vector002
class(vector002)
is.vector(vector002)
matrix001=matrix(1:6, ncol = 3, nrow = 2)
matrix001
class(matrix001)
is.matrix(matrix001)
matrix002=matrix(c('a','b','c','d','e','f'), ncol = 2, nrow = 3)
matrix002
class(matrix002)
is.matrix(matrix002)
is.vector(matrix002)
data_frame001=data.frame(id = letters[1:3], x = 1:3, y = 11:13)
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
data_frame001=data.frame(id = letters[1:3], x = 1:3, y = 11:13)
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
data_frame001=data.frame(id = c('a','b','c'), x = 1:3, y = c(TRUE,FALSE,TRUE))
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
data_frame001=data.frame(id = c('a','b','c'), x = 1:3, y = c(TRUE,FALSE,TRUE),z=c('2019-01-01','2019-01-02','2019-01-03'))
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
library(tidyverse)
data_frame001=data.frame(id = c('a','b','c'), x = 1:3, y = c(TRUE,FALSE,TRUE),z=c('2019-01-01','2019-01-02','2019-01-03'))
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
library(tidyverse)
data_frame001=data.frame(id = c('a','b','c'), x = 1:3, y = c(TRUE,FALSE,TRUE),z=c('2019-01-01','2019-01-02','2019-01-03'))
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
glimpse(data_frame001)
library(tidyverse)
data_frame001=data.frame(name= c('pet','sue','tony'),level=as.factor(c('a','b','c')) x = 1:3, y = c(TRUE,FALSE,TRUE),z=c('2019-01-01','2019-01-02','2019-01-03'),
library(tidyverse)
data_frame001=data.frame(name= c('pet','sue','tony'),level=as.factor(c('a','b','c')), x = 1:3, y = c(TRUE,FALSE,TRUE),z=c('2019-01-01','2019-01-02','2019-01-03'),
stringsAsFactors = FALSE)
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
glimpse(data_frame001)
library(tidyverse)
data_frame001=data.frame(name= c('pet','sue','tony'),level=as.factor(c('a','b','c')), x = 1:3, y = c(TRUE,FALSE,TRUE),z=as.Date(c('2019-01-01','2019-01-02','2019-01-03')),
stringsAsFactors = FALSE)
data_frame001
class(data_frame001)
is.data.frame(data_frame001)
glimpse(data_frame001)
library(tidyverse)
Liste001=list(matrix001,data_frame001)
Liste001
class(data_frame001)
is.data.frame(data_frame001)
library(tidyverse)
Liste001=list(vector001,matrix001)
Liste001
class(data_frame001)
is.data.frame(data_frame001)
library(tidyverse)
List001=list(vector001,matrix001)
List001
class(List001)
is.list(List001)
blogdown:::serve_site()
vector001=c(1,2,3,4,5)
vector001
class(vector001)
dim(vector001)
is.vector(vector001)
matrix001=matrix(1:6, ncol = 3, nrow = 2)
matrix001
class(matrix001)
dim(matrix001)
is.matrix(matrix001)
matrix002=matrix(c('a','b','c','d','e','f'), ncol = 2, nrow = 3)
matrix002
class(matrix002)
dim(matrix001)
is.matrix(matrix002)
matrix002=matrix(c('a','b','c','d','e','f'), ncol = 2, nrow = 3)
matrix002
class(matrix002)
dim(matrix002)
is.matrix(matrix002)
Array001=array(c(1:24),dim = c(4,3,2))
Array001
class(Array001)
dim(Array001)
is.array(Array001)
Array002=array(c('a','b','c','d','e','f','g','h'),dim = c(2,2,2))
Array002
class(Array002)
dim(Array002)
is.array(Array002)
library(tidyverse)
data_frame001=data.frame(name= c('pet','sue','tony'),level=as.factor(c('a','b','c')), x = 1:3, y = c(TRUE,FALSE,TRUE),z=as.Date(c('2019-01-01','2019-01-02','2019-01-03')),
stringsAsFactors = FALSE)
data_frame001
class(data_frame001)
dim(data_frame001)
is.data.frame(data_frame001)
glimpse(data_frame001)
library(tidyverse)
List001=list(vector001,matrix001)
List001
class(List001)
dim(List001)
is.list(List001)
