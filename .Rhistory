blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
x_train[1, , ][1]
x_train[1, , ][1:784]
length(x_train[1, , ])
x_train[1, , ]
200/255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
dim(y_train)
head(y_train)
?compile
summary(model)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
256*784
256*128
255*784
257*784
256*785
128*785
257*128
200960+32896+1290
784*256
200960-200704
128*10
blogdown:::serve_site()
blogdown:::serve_site()
model_score=cbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
str(x_train)
str(y_train)
dim(x_train)
dim(y_train)
dim(x_test)
dim(y_test)
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
dim(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
plot(history)
y_test_final=mnist$test$y
table(y_test_final)
Naive_score=1000/length(y_test_final)
Naive_score
library(tidyverse)
library(keras)
library(rpart)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
x_train <- x_train / 255
x_test <- x_test / 255
all_data_train=as.data.frame(cbind(x_train, y_train))
d_tree <- rpart(y_train ~ .,method="class", data=all_data_train)
prediction<- predict(d_tree, newdata = as.data.frame(x_test), type = "class")
prediction=as.data.frame(prediction)
all_prediction=as.data.frame(cbind(prediction,y_test))%>%mutate(correct=if_else(prediction==y_test,1,0))
pred <- predict(rf, x_test)
pred <- predict(rf, x_test)
pred <- predict(rf, x_test)
pred <- predict(d_tree, x_test)
pred <- predict(d_tree, as.data.frame(x_test))
decision_tree_score=mean(pred == all_data_test$y_test)
pred <- predict(d_tree, as.data.frame(x_test))
decision_tree_score=mean(pred == y_test)
pred <- predict(d_tree, as.data.frame(x_test))
all_data_test=as.data.frame(cbind(x_test, y_test))
decision_tree_score=mean(pred == all_data_test$y_test)
decision_tree_score
decision_tree_score
prediction<- predict(d_tree, newdata = as.data.frame(x_test), type = "class")
prediction=as.data.frame(prediction)
all_prediction=as.data.frame(cbind(prediction,y_test))%>%mutate(correct=if_else(prediction==y_test,1,0))
decision_tree_score=sum(all_prediction$correct)/nrow(all_prediction)
decision_tree_score
library(tidyverse)
library(keras)
library(randomForest)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
x_train <- x_train / 255
x_test <- x_test / 255
all_data_train=as.data.frame(cbind(x_train, y_train))
all_data_train$y_train=factor(all_data_train$y_train)
all_data_test=as.data.frame(cbind(x_test, y_test))
numTrees = 5
rf <- randomForest(y_train ~ .,data=all_data_train,ntree=numTrees,importance = TRUE)
pred <- predict(rf, x_test)
randon_forest_score=mean(pred == all_data_test$y_test)
randon_forest_score
model_score=cbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test) %>% select(acc)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
str(x_train)
str(y_train)
dim(x_train)
dim(y_train)
dim(x_test)
dim(y_test)
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
dim(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
plot(history)
tensorflow_DNN_score
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score
tensorflow_DNN_score
tensorflow_DNN_score$acc
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score
model_score=cbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
glimpse(model_score)
as.data.frame(model_score)
aa=as.data.frame(model_score)
glimpse(aa)
model_score=rbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
as.data.frame(model_score)%>%ggplot()
as.data.frame(model_score)
gg=model_score_df%>%ggplot(aes(x=model,y=V1)+geom_bar(stat = 'identity')
model_score_df=as.data.frame(model_score)
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1)+geom_bar(stat = 'identity')
gg=ggplot(data=model_score_df,aes(x=model,y=V1)+geom_bar(stat = 'identity')
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1))+geom_bar(stat = 'identity')
gg
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
gg=ggplot(data=model_score_df,aes(x=model,y=V1))+geom_bar(stat = 'identity') +coord_flip()
gg
library(keras)
mnist <- dataset_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
library(keras)
fashion_mnist <- dataset_fashion_mnist()
install_keras()
library(keras)
install_keras()
install_keras()
install_keras()
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
?fit
??fit
library(keras)
fashion_mnist <- dataset_fashion_mnist()
c(x_train, y_train) %<-% fashion_mnist$train
c(x_test, y_test) %<-% fashion_mnist$test
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(3,3))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
par(mfcol=c(2,2))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:4) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
class_names = c('T-shirt/top',
'Trouser',
'Pullover',
'Dress',
'Coat',
'Sandal',
'Shirt',
'Sneaker',
'Bag',
'Ankle boot')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
head(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(keras)
library(reticulate)
tensorflow::tf_config()
keras:::keras_version()
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
par(mfcol=c(4,4))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:16) {
img <- x_train[i, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = y_train[i])
}
img <- x_train[1, , ]
img <- t(apply(img, 2, rev))
image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n')
class(x_train)
class(y_train)
class(x_test)
class(y_test)
dim(x_train)
dim(y_train)
table(y_train)
dim(x_test)
dim(y_test)
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
dim(x_train)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
dim(y_train)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 10, batch_size = 128,
validation_split = 0.2
)
plot(history)
tensorflow_DNN_score <- model %>% evaluate(x_test,y_test)
tensorflow_DNN_score
y_test_final=mnist$test$y
table(y_test_final)
Naive_score=1000/length(y_test_final)
Naive_score
tensorflow_DNN_score=tensorflow_DNN_score$acc
tensorflow_DNN_score
decision_tree_score=0.61
randon_forest_score=0.92
model_score=rbind(Naive_score,decision_tree_score,randon_forest_score,tensorflow_DNN_score)
model_score
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
model_score_df=model_score_df %>% arrange(V1) %>%  mutate(model = factor(model, model),Accuray=V1)
library(keras)
library(tidyverse)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
model_score_df=as.data.frame(model_score)
model_score_df$model <- row.names(model_score_df)
model_score_df=model_score_df %>% arrange(V1) %>%  mutate(model = factor(model, model),Accuray=V1)
gg=ggplot(data=model_score_df,aes(x=model,y=Accuray,fill=model))+geom_bar(stat = 'identity') +geom_text(aes(label=Accuray)) + guides(fill=FALSE)
gg+theme_bw()
blogdown:::serve_site()
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
library(meme)
u <- "kid.png"
x=meme(u, "Tensorflow", "So easy!")
x
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
library(meme)
u <- "kid.png"
x=meme(u, "Tensorflow", "So easy !")
x
