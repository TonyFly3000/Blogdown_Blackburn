legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = staticplot + transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = 'GDP per Year : {closest_state}',
subtitle  =  "Top 10 Countries",
caption  = "GDP in Billions USD | Data Source: World Bank Data")
anim
gdp_formatted <- data001 %>%
group_by(year) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-divorce_marriage_ratio),
#Value_rel = divorce_marriage_ratio/divorce_marriage_ratio[rank==1],
Value_lbl = paste0(" ",divorce_marriage_ratio)) %>%
group_by(area) %>%
filter(rank <=10) %>%
ungroup()
staticplot = ggplot(gdp_formatted, aes(rank, group = area,
fill = as.factor(area), color = as.factor(area))) +
geom_tile(aes(y = divorce_marriage_ratio/2,
height = divorce_marriage_ratio,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(area, " ")), vjust = 0.2, hjust = 1) +
geom_text(aes(y=divorce_marriage_ratio,label = Value_lbl, hjust=0)) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = staticplot + transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = '离婚比率: {closest_state}',
subtitle  =  "Top 10 离婚比率省份",
caption  = "数据源:中国统计局")
anim
# 2017 top 10
area001=data001%>%  filter(year==2017) %>%mutate(rank = rank(-divorce_marriage_ratio)) %>% filter(rank<=10)
gdp_formatted <- data001 %>%
filter(area %in% area001$area) %>%
group_by(year) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = rank(-divorce_marriage_ratio),
#Value_rel = divorce_marriage_ratio/divorce_marriage_ratio[rank==1],
Value_lbl = paste0(" ",divorce_marriage_ratio)) %>%
group_by(area) %>%
#filter(rank <=10) %>%
ungroup()
staticplot = ggplot(gdp_formatted, aes(rank, group = area,
fill = as.factor(area), color = as.factor(area))) +
geom_tile(aes(y = divorce_marriage_ratio/2,
height = divorce_marriage_ratio,
width = 0.9), alpha = 0.8, color = NA) +
geom_text(aes(y = 0, label = paste(area, " ")), vjust = 0.2, hjust = 1) +
geom_text(aes(y=divorce_marriage_ratio,label = Value_lbl, hjust=0)) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x = element_line( size=.1, color="grey" ),
panel.grid.minor.x = element_line( size=.1, color="grey" ),
plot.title=element_text(size=25, hjust=0.5, face="bold", colour="grey", vjust=-1),
plot.subtitle=element_text(size=18, hjust=0.5, face="italic", color="grey"),
plot.caption =element_text(size=8, hjust=0.5, face="italic", color="grey"),
plot.background=element_blank(),
plot.margin = margin(2,2, 2, 4, "cm"))
anim = staticplot + transition_states(year, transition_length = 4, state_length = 1) +
view_follow(fixed_x = TRUE)  +
labs(title = '离婚比率: {closest_state}',
subtitle  =  "Top 10 离婚比率省份",
caption  = "数据源:中国统计局")
anim
library(tidyverse)
library(dplyr)
library(scales)
library(ggplot2)
library(readr)
library(janitor)
library(ggthemes)
library(readxl)
library(rayshader)
theme_set(theme_light())
marriage001=read_csv('marriage.csv')
divorce001=read_csv('divorce.csv')
income001=read_excel('income.xls')
marriage002=marriage001 %>% gather(year,marriage_couple, '2017':'2009')
divorce002=divorce001 %>% gather(year,divorce_couple, '2017':'2009')
income002=income001 %>% gather(year,annual_income, '2017':'2009')
head(marriage002)
head(divorce002)
head(income002)
data001=sqldf('select t1.*,t2.divorce_couple,t3.annual_income
from marriage002 t1
left join divorce002 t2
on t1.area=t2.area and t1.year=t2.year
left join income002 t3
on t1.area=t3.area')
data001$year=as.integer(data001$year)
data001$divorce_marriage_ratio=round(data001$divorce_couple/data001$marriage_couple,2)
data001=data001 %>% arrange()
gg_plot <- ggplot(data001, aes(x = year, y = divorce_marriage_ratio,col=annual_income)) +
theme_minimal() +
geom_point() +
labs(y="离婚比率",
x='',
colour = "人均年收入",
title = "2009到2017年各省离婚比率与",
subtitle = "与各省人均年收入的关系",
caption ="统计时间:2017;数据源:中国统计局
@Tony Duan")+scale_x_continuous(breaks= pretty_breaks())
gg_plot
plot_gg(gg_plot, height=3, width=3.5, multicore=TRUE, pointcontract = 0.7, soliddepth=-200)
data001=sqldf('select t1.*,t2.divorce_couple,t3.annual_income
from marriage002 t1
left join divorce002 t2
on t1.area=t2.area and t1.year=t2.year
left join income002 t3
on t1.area=t3.area')
data001$year=as.integer(data001$year)
data001$divorce_marriage_ratio=round(data001$divorce_couple/data001$marriage_couple,2)
library(sqldf)
data001=sqldf('select t1.*,t2.divorce_couple,t3.annual_income
from marriage002 t1
left join divorce002 t2
on t1.area=t2.area and t1.year=t2.year
left join income002 t3
on t1.area=t3.area')
data001$year=as.integer(data001$year)
data001$divorce_marriage_ratio=round(data001$divorce_couple/data001$marriage_couple,2)
data001=data001 %>% arrange()
gg_plot <- ggplot(data001, aes(x = year, y = divorce_marriage_ratio,col=annual_income)) +
theme_minimal() +
geom_point() +
labs(y="离婚比率",
x='',
colour = "人均年收入",
title = "2009到2017年各省离婚比率与",
subtitle = "与各省人均年收入的关系",
caption ="统计时间:2017;数据源:中国统计局
@Tony Duan")+scale_x_continuous(breaks= pretty_breaks())
gg_plot
plot_gg(gg_plot, height=3, width=3.5, multicore=TRUE, pointcontract = 0.7, soliddepth=-200)
gg_plot
plot_gg(gg_plot, height=3, width=3.5, multicore=TRUE, pointcontract = 0.7, soliddepth=-200)
render_snapshot(clear = TRUE)
render_snapshot(clear = TRUE)
data001=data001 %>% arrange()
gg_plot <- ggplot(data001, aes(x = year, y = divorce_marriage_ratio,col=annual_income)) +
theme_minimal() +
geom_point() +
labs(y="离婚比率",
x='',
colour = "人均年收入",
title = "2009到2017年各省离婚比率与",
subtitle = "与各省人均年收入的关系",
caption ="统计时间:2017;数据源:中国统计局
@Tony Duan")+scale_x_continuous(breaks= pretty_breaks())
gg_plot
plot_gg(gg_plot, height=3, width=3.5, multicore=TRUE, pointcontract = 0.7, soliddepth=-200)
render_snapshot(clear = TRUE)
library(jsonlite)
library(ggplot2)
library(gganimate)
library(tidyverse)
library(plotly)
url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=1580373566110'
data001 = readLines(url, encoding="UTF-8")
data001 = sub("^\\d+", "", data001)
data001 = sub("^\\(", "", data001)
data001 = sub("\\)$", "", data001)
data002 = fromJSON(data001)
data003= fromJSON(data002$data)
trend001=data003$chinaDayList
trend001$date=as.Date(trend001$date, "%m.%d")
trend001$confirm=as.numeric(trend001$confirm)
trend001$suspect=as.numeric(trend001$suspect)
trend001$dead=as.numeric(trend001$dead)
trend001$heal=as.numeric(trend001$heal)
trend002=trend001 %>% mutate(
confirm_growth = confirm - lag(confirm),
confirm_change_Rate= confirm_growth /confirm ,
suspect_growth = suspect - lag(suspect),
suspect_change_Rate= suspect_growth /suspect ,
dead_growth = dead - lag(dead),
dead_change_Rate= dead_growth /dead ,
heal_growth = heal - lag(heal),
heal_change_Rate= heal_growth /heal
) %>% filter(date>='2020-01-15')
glimpse(trend002)
library(reticulate)
library(reticulate)
cc=cars
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
cc=cars
summary(cars)
cc=cars
cc=cars
summary(cars)
cc=cars
library(jsonlite)
library(ggplot2)
library(gganimate)
library(tidyverse)
library(plotly)
url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=1580373566110'
data001 = readLines(url, encoding="UTF-8")
data001 = sub("^\\d+", "", data001)
data001 = sub("^\\(", "", data001)
data001 = sub("\\)$", "", data001)
data002 = fromJSON(data001)
data003= fromJSON(data002$data)
trend001=data003$chinaDayList
trend001$date=as.Date(trend001$date, "%m.%d")
trend001$confirm=as.numeric(trend001$confirm)
trend001$suspect=as.numeric(trend001$suspect)
trend001$dead=as.numeric(trend001$dead)
trend001$heal=as.numeric(trend001$heal)
trend002=trend001 %>% mutate(
confirm_growth = confirm - lag(confirm),
confirm_change_Rate= confirm_growth /confirm ,
suspect_growth = suspect - lag(suspect),
suspect_change_Rate= suspect_growth /suspect ,
dead_growth = dead - lag(dead),
dead_change_Rate= dead_growth /dead ,
heal_growth = heal - lag(heal),
heal_change_Rate= heal_growth /heal
) %>% filter(date>='2020-01-15')
glimpse(trend002)
library(reticulate)
py_run_string("import os as os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/User/Anaconda3/Library/plugins/platforms'")
library(reticulate)
library(reticulate)
py_install("seaborn")
library(reticulate)
py_install("seaborn")
py_install("siuba")
sns.lineplot(x="date", y="suspect",data=trend002)
sns.lineplot(x="date", y="suspect",data=trend002)
library(reticulate)
py_install("seaborn=0.9.0")
#py_install("siuba")
library(jsonlite)
library(ggplot2)
library(gganimate)
library(tidyverse)
library(plotly)
url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=1580373566110'
data001 = readLines(url, encoding="UTF-8")
data001 = sub("^\\d+", "", data001)
data001 = sub("^\\(", "", data001)
data001 = sub("\\)$", "", data001)
data002 = fromJSON(data001)
data003= fromJSON(data002$data)
trend001=data003$chinaDayList
trend001$date_time=as.Date(trend001$date, "%m.%d")
trend001$confirm=as.numeric(trend001$confirm)
trend001$suspect=as.numeric(trend001$suspect)
trend001$dead=as.numeric(trend001$dead)
trend001$heal=as.numeric(trend001$heal)
trend002=trend001 %>% mutate(
confirm_growth = confirm - lag(confirm),
confirm_change_Rate= confirm_growth /confirm ,
suspect_growth = suspect - lag(suspect),
suspect_change_Rate= suspect_growth /suspect ,
dead_growth = dead - lag(dead),
dead_change_Rate= dead_growth /dead ,
heal_growth = heal - lag(heal),
heal_change_Rate= heal_growth /heal
) %>% filter(date>='2020-01-15')
glimpse(trend002)
trend001=data003$chinaDayList
trend001$date_time=as.Date(trend001$date, "%m.%d")
trend001$confirm=as.numeric(trend001$confirm)
trend001$suspect=as.numeric(trend001$suspect)
trend001$dead=as.numeric(trend001$dead)
trend001$heal=as.numeric(trend001$heal)
trend002=trend001 %>% mutate(
confirm_growth = confirm - lag(confirm),
confirm_change_Rate= confirm_growth /confirm ,
suspect_growth = suspect - lag(suspect),
suspect_change_Rate= suspect_growth /suspect ,
dead_growth = dead - lag(dead),
dead_change_Rate= dead_growth /dead ,
heal_growth = heal - lag(heal),
heal_change_Rate= heal_growth /heal
) %>% filter(date_time>='2020-01-15')
glimpse(trend002)
data004=data003$areaTree[[2]][[1]]
daily001=data.frame(name = data004$name,
confirm_num=data004$total$confirm,
dead_num=data004$total$dead,
confirm = cut(data004$total$confirm, c(1,10,100,500,1000,10000),
include.lowest = T, right=F,dig.lab=10)) %>% arrange(desc(confirm_num))
data004=data003$areaTree[[2]][[1]]
daily001=data.frame(name = data004$name,
confirm_num=data004$total$confirm,
dead_num=data004$total$dead,
confirm = cut(data004$total$confirm, c(1,10,100,500,1000,10000),
include.lowest = T, right=F,dig.lab=10)) %>% arrange(desc(confirm_num))
data004=data003$areaTree[[2]][[1]]
daily001=data.frame(name = data004$name,
confirm_num=data004$total$confirm,
dead_num=data004$total$dead,
confirm = cut(data004$total$confirm, c(1,10,100,500,1000,10000),
include.lowest = T, right=F,dig.lab=10)) %>% arrange(desc(confirm_num))
p <- plot_ly(trend002, x = ~date_time, y = ~confirm_change_Rate , name = 'confirm_change_Rate ',type = 'scatter', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~suspect_change_Rate, name = 'suspect_change_Rate', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~dead_change_Rate, name = 'dead_change_Rate', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~heal_change_Rate, name = 'heal_change_Rate', mode = 'lines+markers')%>%
layout(
title = "Coronavirus Visualization",
xaxis = list(title = "date"),
yaxis = list(title = "increase rate compare with last day")
)
p
data004=data003$areaTree[[2]][[1]]
daily001=data.frame(name = data004$name,
confirm_num=data004$total$confirm,
dead_num=data004$total$dead,
confirm = cut(data004$total$confirm, c(1,10,100,500,1000,10000),
include.lowest = T, right=F,dig.lab=10)) %>% arrange(desc(confirm_num))
data004=data003$areaTree[[2]][[1]]
daily001=data.frame(name = data004$name,
confirm_num=data004$total$confirm,
dead_num=data004$total$dead,
confirm = cut(data004$total$confirm, c(1,10,100,500,1000,10000),
include.lowest = T, right=F,dig.lab=10)) %>% arrange(desc(confirm_num))
data004$name
data004
View(data003)
data004=data003$areaTree[[2]][[2]]
data003$areaTree[[2]][[2]]
data003$areaTree[[2]][[0]]
data003$areaTree[[2]][[1]]
data003$areaTree[[2]]
data003$areaTree[[1]]
data003$areaTree[[2]]
data003$areaTree[[2=3]]
data003$areaTree[[3]]
data003$areaTree[[3]][[1]]
data004$name
data004$name
data004$name
data004=data003$areaTree[[2]][[1]][,c(1,3)]
data004=data003$areaTree[[1,2]][[1]][,c(1,3)]
data003$areaTree[[1,2]][[1]][,c(1,3)]
data003$areaTree[1,2][[1]][,c(1,3)]
data003$areaTree[1,2]
data003$areaTree[1,2][[1]]
data003$areaTree[1,2][[1]][1,2][[1]][,1:2]
url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=1580373566110'
data001 = readLines(url, encoding="UTF-8")
data001 = sub("^\\d+", "", data001)
data001 = sub("^\\(", "", data001)
data001 = sub("\\)$", "", data001)
data002 = fromJSON(data001)
data003= fromJSON(data002$data)
data003$chinaTotal
data003$areaTree[1,2][[1]][1,2][[1]][,1:2]
d$chinaDayList
data003$chinaDayList
data003$areaTree[1,2][[1]][1,2][[1]][,1:2]
View(data003)
data003$areaTree[3]
data003$areaTree[3][1]
data003$areaTree[3][[1]]
data003$areaTree[[3][[1]]
data003$areaTree[[3]][[1]]
data003$areaTree[[3]][[2]]
data003$areaTree[[3]][[3]]
data003$areaTree[[3]][[4]]
View(data003)
data003$areaTree[1,2][[1]]
data003$areaTree[3][[1]][1,2]
library(cCov2019)
remotes::install_github("GuangchuangYu/nCov2019")
library(cCov2019)
#remotes::install_github("GuangchuangYu/nCov2019")
library(cCov2019)
#remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
x=get_nCov2019()
daily001=get_nCov2019()
time(daily001)
daily002=daily001[]
p <- plot_ly(daily002, x = ~name, y = ~confirm, type = 'bar',text = ~confirm, textposition = 'auto') %>%
layout(
xaxis = list(title = time(daily001),
categoryorder = "confirm_num",
categoryarray = ~name)
)
p
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(reticulate)
py_run_string("import os as os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/User/Anaconda3/Library/plugins/platforms'")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
reticulate::py_config()
conda_install('siuba')
library(reticulate)
conda_install('siuba')
blogdown:::serve_site()
library(reticulate)
py_run_string("import os as os")
py_run_string("os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/User/Anaconda3/Library/plugins/platforms'")
library(jsonlite)
library(ggplot2)
library(gganimate)
library(tidyverse)
library(plotly)
url = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=1580373566110'
data001 = readLines(url, encoding="UTF-8")
data001 = sub("^\\d+", "", data001)
data001 = sub("^\\(", "", data001)
data001 = sub("\\)$", "", data001)
data002 = fromJSON(data001)
data003= fromJSON(data002$data)
trend001=data003$chinaDayList
trend001$date_time=as.Date(trend001$date, "%m.%d")
trend001$confirm=as.numeric(trend001$confirm)
trend001$suspect=as.numeric(trend001$suspect)
trend001$dead=as.numeric(trend001$dead)
trend001$heal=as.numeric(trend001$heal)
trend002=trend001 %>% mutate(
confirm_growth = confirm - lag(confirm),
confirm_change_Rate= confirm_growth /confirm ,
suspect_growth = suspect - lag(suspect),
suspect_change_Rate= suspect_growth /suspect ,
dead_growth = dead - lag(dead),
dead_change_Rate= dead_growth /dead ,
heal_growth = heal - lag(heal),
heal_change_Rate= heal_growth /heal
) %>% filter(date_time>='2020-01-15')
glimpse(trend002)
p <- plot_ly(trend001, x = ~date_time, y = ~confirm, name = 'confirm',type = 'scatter', mode = 'lines+markers')%>%add_trace(x = ~date_time, y = ~suspect, name = 'suspect', mode = 'lines+markers') %>% layout(
title = "Coronavirus Visualization",
xaxis = list(title = "date"),
yaxis = list(title = "person")
)
p
p <- plot_ly(trend002, x = ~date_time, y = ~confirm_change_Rate , name = 'confirm_change_Rate ',type = 'scatter', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~suspect_change_Rate, name = 'suspect_change_Rate', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~dead_change_Rate, name = 'dead_change_Rate', mode = 'lines+markers')%>%
add_trace(x = ~date_time, y = ~heal_change_Rate, name = 'heal_change_Rate', mode = 'lines+markers')%>%
layout(
title = "Coronavirus Visualization",
xaxis = list(title = "date"),
yaxis = list(title = "increase rate compare with last day")
)
p
#remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
x=get_nCov2019()
daily001=get_nCov2019()
time(daily001)
daily002=daily001[]
p <- plot_ly(daily002, x = ~name, y = ~confirm, type = 'bar',text = ~confirm, textposition = 'auto') %>%
layout(
xaxis = list(title = time(daily001),
categoryorder = "confirm_num",
categoryarray = ~name)
)
p
py_install(seaborn)
py_install("seaborn")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
